services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fks_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro  # Basic auth file
      - ./src/staticfiles:/app/staticfiles:ro
      - ./src/media:/app/media:ro
      - ./logs/nginx:/var/log/nginx
      - certbot_webroot:/var/www/certbot:ro
    depends_on:
      - web
      - flower
    environment:
      - TZ=America/Toronto
    restart: unless-stopped
    networks:
      - fks-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  web:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    container_name: fks_app
    expose:
      - "8000"
    volumes:
      - ./src:/app
      - ./logs/web:/app/logs
    working_dir: /app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn web.django.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 120"
    depends_on:
      - db
      - redis
    environment:
      - TZ=America/Toronto
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=web.django.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-dev-key-change-in-production}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - POSTGRES_DB=${POSTGRES_DB:-trading_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Session configuration
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-False}
      - SESSION_COOKIE_HTTPONLY=True
      - SESSION_COOKIE_SAMESITE=Lax
      - SESSION_COOKIE_AGE=604800  # 7 days
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - fks-network

  db:
    image: timescale/timescaledb:latest-pg16
    container_name: fks_db
    restart: always
    environment:
      TZ: America/Toronto
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-trading_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c shared_preload_libraries=timescaledb
    networks:
      - fks-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fks_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      TZ: America/Toronto
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - fks-network

  redis:
    image: redis:7
    container_name: fks_redis
    restart: always
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    environment:
      TZ: America/Toronto
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - fks-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
    working_dir: /app
    command: celery -A web.django worker --loglevel=info --concurrency=4
    volumes:
      - ./src:/app
      - ./logs/celery:/app/logs
    environment:
      - TZ=America/Toronto
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=web.django.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_DB=${POSTGRES_DB:-trading_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - fks-network

  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    working_dir: /app
    command: celery -A web.django beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./src:/app
      - ./logs/celery:/app/logs
    environment:
      - TZ=America/Toronto
      - PYTHONUNBUFFERED=1
      - DJANGO_SETTINGS_MODULE=web.django.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - POSTGRES_DB=${POSTGRES_DB:-trading_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/1
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - celery_worker
    restart: unless-stopped
    networks:
      - fks-network

  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile
    working_dir: /app
    command: celery -A web.django flower --port=5555
    volumes:
      - ./src:/app
    ports:
      - "5555:5555"
    environment:
      - TZ=America/Toronto
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped
    networks:
      - fks-network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  certbot_webroot:

networks:
  fks-network:
    driver: bridge