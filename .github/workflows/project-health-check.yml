name: Project Health Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install pytest pytest-cov pip-audit ruff mypy
    
    - name: Run tests
      run: |
        cd src
        pytest ../tests/ -v --cov=. --cov-report=term --cov-report=json
      continue-on-error: true
    
    - name: Security audit
      run: |
        pip-audit --requirement requirements.txt --format json > security-audit.json || true
      continue-on-error: true
    
    - name: Lint check
      run: |
        ruff check src/ --output-format=json > lint-report.json || true
      continue-on-error: true
    
    - name: Type check
      run: |
        mypy src/ --ignore-missing-imports --json-report mypy-report || true
      continue-on-error: true
    
    - name: Generate project metrics
      run: |
        python scripts/analyze_project.py --output=metrics.json
      continue-on-error: true
    
    - name: Update PROJECT_STATUS.md
      run: |
        python .github/scripts/update_status.py
      continue-on-error: true
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: health-check-reports
        path: |
          coverage.json
          security-audit.json
          lint-report.json
          mypy-report/
          metrics.json
    
    - name: Generate health summary
      id: summary
      run: |
        echo "## üè• Project Health Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Coverage
        if [ -f coverage.json ]; then
          COVERAGE=$(python -c "import json; data=json.load(open('coverage.json')); print(f\"{data['totals']['percent_covered']:.1f}\")" 2>/dev/null || echo "N/A")
          echo "**Test Coverage**: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security
        if [ -f security-audit.json ]; then
          VULN_COUNT=$(jq '.vulnerabilities | length' security-audit.json 2>/dev/null || echo "0")
          echo "**Security Vulnerabilities**: $VULN_COUNT" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Lint
        if [ -f lint-report.json ]; then
          LINT_COUNT=$(jq 'length' lint-report.json 2>/dev/null || echo "0")
          echo "**Lint Issues**: $LINT_COUNT" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Metrics
        if [ -f metrics.json ]; then
          python -c 'import json; data=json.load(open("metrics.json")); print(f"**Tests Passing**: {data[\"tests\"][\"tests_passed\"]}/{data[\"tests\"][\"tests_total\"]}"); print(f"**Legacy Imports**: {data[\"imports\"][\"files_with_legacy\"]} files")' >> $GITHUB_STEP_SUMMARY || true
        fi
    
    - name: Comment PR with summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let body = '## üè• Health Check Results\n\n';
          
          // Coverage
          if (fs.existsSync('coverage.json')) {
            const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
            const pct = coverage.totals.percent_covered.toFixed(1);
            body += `**Test Coverage**: ${pct}% ${pct < 80 ? '‚ö†Ô∏è' : '‚úÖ'}\n`;
          }
          
          // Security
          if (fs.existsSync('security-audit.json')) {
            const security = JSON.parse(fs.readFileSync('security-audit.json', 'utf8'));
            const vulnCount = security.vulnerabilities ? security.vulnerabilities.length : 0;
            body += `**Security Vulnerabilities**: ${vulnCount} ${vulnCount > 0 ? '‚ö†Ô∏è' : '‚úÖ'}\n`;
          }
          
          // Lint
          if (fs.existsSync('lint-report.json')) {
            const lint = JSON.parse(fs.readFileSync('lint-report.json', 'utf8'));
            const lintCount = Array.isArray(lint) ? lint.length : 0;
            body += `**Lint Issues**: ${lintCount} ${lintCount > 20 ? '‚ö†Ô∏è' : '‚úÖ'}\n`;
          }
          
          // Metrics
          if (fs.existsSync('metrics.json')) {
            const metrics = JSON.parse(fs.readFileSync('metrics.json', 'utf8'));
            body += `**Tests Passing**: ${metrics.tests.tests_passed}/${metrics.tests.tests_total}\n`;
            body += `**Legacy Imports**: ${metrics.imports.files_with_legacy} files ${metrics.imports.files_with_legacy > 0 ? '‚ö†Ô∏è' : '‚úÖ'}\n`;
          }
          
          body += '\nüìÅ View full reports in workflow artifacts.';
          
          // Find and update existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Health Check Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
